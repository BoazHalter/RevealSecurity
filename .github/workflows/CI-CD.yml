name: RevealSecurity CI / CD
on:
  push:
    branches:
      - "main"
jobs:
  deploy-helm-application:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start 
      
          
    - name: Deploy Helm Chart
      run: |
        helm repo add sickhub https://sickhub.github.io/charts
        helm repo update
        helm search repo sickhub
        helm upgrade --create-namespace --namespace test --install --values https://raw.githubusercontent.com/SickHub/charts/main/sickhub/nginx-phpfpm/values.yaml  my-release sickhub/nginx-phpfpm

    - name: Validate Chart Deployed
      run: |
        
        # Define iteration counter
        itr=0
        
        # Define the command to execute
        command="kubectl get pods -n test"
        
        # Run the command until successful execution
        until $command &> /dev/null; do
          echo "Waiting for pods to be available..."
          sleep 5
          ((itr++))
          if $itr == 7 ;then
            break
          fi
        done
        # Once pods are available, execute the command to get pods
        $command
    
        sleep 10
        kubectl get pods --namespace test -o wide
        #kubectl get all,cm,secret,ing -A
        podName=`kubectl get pods -n test --no-headers -o custom-columns=":metadata.name" | grep "phpfpm-nginx"`
        echo "podName: $podName"
        POD_HOST=`kubectl get pod $podName -n test --template '{{.status.podIP}}'`
        echo "POD_HOST: $POD_HOST"
        NODE_PORT=`kubectl describe services -n test my-release-nginx-phpfpm-nginx | grep "NodePort:"  | awk '{print $3}'`
        echo "NODE_PORT: $NODE_PORT"
        NODE_PORT=${NODE_PORT::-4}
        echo "NODE_PORT: $NODE_PORT"
        #service/my-release-nginx-phpfpm-nginx 
        #export POD_NAME=$(kubectl get pods --namespace test -l "app.kubernetes.io/name=nginx-phpfpm-nginx,app.kubernetes.io/instance=my-release" -o jsonpath="{.items[0].metadata.name}")
        #export CONTAINER_PORT=$(kubectl get pod --namespace test $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
        #echo "Visit http://127.0.0.1:8080 to use your application"
        #kubectl --namespace test port-forward $POD_NAME 8080:$CONTAINER_PORT
        curl --connect-timeout 10 -kvi "http://192.168.49.2:8080"

  deploy-application:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start 
  
    - name: Deploy To K8S
      run: |
        kubectl apply -f deployment.yaml
        kubectl expose deployment nginx-php-deployment --type=NodePort --name=nginx-php-service
    
    - name: Validate Service up
      run: |
        sleep 20
        kubectl get pods --selector="app=nginx-php" --output=wide

        podName=`kubectl get pods --no-headers -o custom-columns=":metadata.name"`
        POD_HOST=`kubectl get pod $podName --template '{{.status.podIP}}'`
        echo $POD_HOST
        NODE_PORT=`kubectl describe services nginx-php-service | grep "NodePort:"  | awk '{print $3}'`
        echo ${NODE_PORT::-4}
        NODE_PORT=${NODE_PORT::-4}
        echo $NODE_PORT
        kubectl cluster-info
        curl --connect-timeout 10 -kvi "http://192.168.49.2:$NODE_PORT"
        
  build-and-push-application:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Login Docker Hub
      run: |
        docker login -u "boazhalter" -p "${{ secrets.dockerhubpassword }}" docker.io
    
    - name: Build Docker Image
      run: |
          docker build . -t boazhalter/revealsecurity:latest
          
    - name: Push Docker Image
      run: |
        docker push boazhalter/revealsecurity:latest
        
